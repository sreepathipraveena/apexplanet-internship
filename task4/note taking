<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>StickyNotes • Local Storage Note App</title>
  <style>
    :root{
      --bg:#0f1724;
      --card:#6f737b;
      --accent1:#7c3aed;
      --accent2:#06b6d4;
      --muted: #9aa4b2;
      --glass: rgba(255,255,255,0.03);
      --glass-2: rgba(255,255,255,0.04);
      --success: #16a34a;
    }

    *{box-sizing:border-box}
    html,body{height:100%;margin:0;font-family:Inter,ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial;}
    body{
      background: radial-gradient(1200px 600px at 10% 10%, rgba(124,58,237,0.12), transparent),
                  radial-gradient(1000px 400px at 90% 80%, rgba(6,182,212,0.08), transparent),
                  var(--bg);
      color:#e6eef6;
      padding:28px;
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
      min-height:100%;
    }

    header{
      display:flex;
      gap:16px;
      align-items:center;
      justify-content:space-between;
      max-width:1100px;
      margin:0 auto 22px;
    }
    .brand{
      display:flex;
      gap:12px;
      align-items:center;
    }
    .logo{
      width:56px;height:56px;border-radius:12px;
      background: linear-gradient(135deg,var(--accent1),var(--accent2));
      display:flex;align-items:center;justify-content:center;
      font-weight:700;font-size:20px;box-shadow:0 6px 30px rgba(2,6,23,0.6);
    }
    h1{font-size:20px;margin:0}
    p.lead{margin:0;color:var(--muted);font-size:13px}

    .controls{
      display:flex;
      gap:12px;
      align-items:center;
      flex-wrap:wrap;
    }

    .search {
      display:flex;align-items:center;gap:8px;
      background:var(--glass);
      border-radius:12px;padding:8px 12px;
      border:1px solid rgba(255,255,255,0.03);
      min-width:220px;
    }
    .search input{
      background:transparent;border:0;color:inherit;outline:none;width:160px;
    }
    .btn {
      background:linear-gradient(180deg, rgba(255,255,255,0.04), rgba(255,255,255,0.02));
      border:1px solid rgba(255,255,255,0.04);
      color:inherit;padding:8px 12px;border-radius:10px;cursor:pointer;
      display:inline-flex;gap:8px;align-items:center;font-weight:600;
    }
    .btn.primary{
      background:linear-gradient(90deg,var(--accent1),var(--accent2));
      color:white;border:none;box-shadow:0 8px 30px rgba(6,182,212,0.08);
    }
    .btn.ghost{ background:transparent; border:1px dashed rgba(255,255,255,0.04) }

    main{ max-width:1100px;margin:18px auto 60px; display:grid; grid-template-columns: 360px 1fr; gap:24px; align-items:start; }

    /* left pane - editor */
    .editor{
      background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      border-radius:16px;padding:18px;border:1px solid rgba(255,255,255,0.03);
      box-shadow: 0 8px 30px rgba(2,6,23,0.5);
    }
    .editor h2{margin:0 0 8px;font-size:16px}
    .field{display:flex;flex-direction:column;gap:8px;margin-bottom:12px}
    label{font-size:12px;color:var(--muted)}
    input[type="text"], textarea, select {
      background:transparent;border:1px solid rgba(255,255,255,0.04);padding:10px 12px;border-radius:10px;color:inherit;outline:none;
    }
    textarea{min-height:140px;resize:vertical}

    .palette{display:flex;gap:8px;flex-wrap:wrap}
    .swatch{
      width:34px;height:34px;border-radius:8px;border:2px solid rgba(255,255,255,0.04);cursor:pointer;
      display:inline-flex;align-items:center;justify-content:center;font-weight:700;
    }
    .swatch.active{box-shadow:0 6px 22px rgba(2,6,23,0.6);transform:translateY(-4px)}

    /* right pane - notes */
    .toolbar{
      display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;
    }
    .meta{display:flex;gap:8px;align-items:center}
    .chips{display:flex;gap:8px;align-items:center}

    .grid{
      display:grid;
      grid-template-columns: repeat(auto-fill,minmax(220px,1fr));
      gap:16px;
    }

    .note{
      background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      padding:14px;border-radius:12px;position:relative;border:1px solid rgba(255,255,255,0.03);
      min-height:110px;display:flex;flex-direction:column;gap:8px;
      transition:transform .18s, box-shadow .18s;
    }
    .note:hover{transform:translateY(-6px);box-shadow:0 10px 30px rgba(2,6,23,0.6)}
    .note .top{display:flex;justify-content:space-between;align-items:flex-start;gap:8px}
    .note .title{font-weight:700}
    .note .content{color:var(--muted);font-size:14px;white-space:pre-wrap;overflow:hidden;text-overflow:ellipsis}
    .note .metaSmall{display:flex;gap:8px;align-items:center;font-size:12px;color:var(--muted)}
    .note .actions{display:flex;gap:8px;margin-top:auto}

    .iconBtn{background:transparent;border:0;color:var(--muted);cursor:pointer;padding:6px;border-radius:8px}
    .pin{font-size:18px;color:goldenrod}
    .small{font-size:12px;padding:6px 8px;border-radius:8px}

    .empty{
      text-align:center;color:var(--muted);padding:36px;border-radius:12px;border:1px dashed rgba(255,255,255,0.03);
    }

    footer{max-width:1100px;margin:24px auto;color:var(--muted);text-align:center;font-size:13px}

    /* responsiveness */
    @media (max-width:920px){
      main{grid-template-columns:1fr;gap:16px}
      .search input{width:110px}
    }
  </style>
</head>
<body>
  <header>
    <div class="brand">
      <div class="logo">SN</div>
      <div>
        <h1>StickyNotes</h1>
        <p class="lead">Save notes locally — automatically persisted with localStorage.</p>
      </div>
    </div>

    <div class="controls">
      <div class="search" title="Search notes">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" style="opacity:.85"><path d="M21 21l-4.35-4.35" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"/></svg>
        <input id="searchBox" placeholder="Search title or content..." />
      </div>

      <div class="chips">
        <select id="sortBy" class="btn ghost" title="Sort">
          <option value="pinned">Pinned first</option>
          <option value="new">Newest</option>
          <option value="old">Oldest</option>
        </select>

        <button id="clearAll" class="btn" title="Clear local notes">Clear All</button>
        <button id="exportBtn" class="btn">Export</button>
      </div>
    </div>
  </header>

  <main>
    <!-- Editor -->
    <section class="editor" aria-label="Create a note">
      <h2>Create a Note</h2>

      <div class="field">
        <label for="noteTitle">Title</label>
        <input id="noteTitle" type="text" placeholder="Short descriptive title" maxlength="60" />
      </div>

      <div class="field">
        <label for="noteBody">Content</label>
        <textarea id="noteBody" placeholder="Write your note..."></textarea>
      </div>

      <div class="field">
        <label>Color</label>
        <div class="palette" id="palette">
          <div class="swatch active" data-color="#fff9c4" style="background:#fff9c4;color:#111">A</div>
          <div class="swatch" data-color="#ffd7d7" style="background:#ffd7d7;color:#111">B</div>
          <div class="swatch" data-color="#dbeafe" style="background:#dbeafe;color:#111">C</div>
          <div class="swatch" data-color="#d1fae5" style="background:#d1fae5;color:#111">D</div>
          <div class="swatch" data-color="#f6d6ff" style="background:#f6d6ff;color:#111">E</div>
        </div>
      </div>

      <div style="display:flex;gap:10px;align-items:center;margin-top:8px">
        <button id="saveNote" class="btn primary">Save Note</button>
        <button id="saveAsNew" class="btn">Save as New</button>
        <div style="flex:1"></div>
        <label style="font-size:13px;color:var(--muted);">Pin when saving
          <input type="checkbox" id="pinOnSave" style="margin-left:8px" />
        </label>
      </div>

      <div style="margin-top:12px;color:var(--muted);font-size:13px">
        Tip: Click a note to edit. Use the pin icon to keep important notes on top.
      </div>
    </section>

    <!-- Notes list -->
    <section>
      <div class="toolbar">
        <div class="meta">
          <div style="font-weight:700">Notes</div>
          <div style="color:var(--muted);font-size:13px;margin-left:8px" id="countInfo"></div>
        </div>

        <div>
          <button id="newBlank" class="btn">New Blank</button>
        </div>
      </div>

      <div id="notesGrid" class="grid" aria-live="polite">
        <!-- rendered notes -->
      </div>

      <div id="emptyState" class="empty" style="display:none">
        <div style="font-size:18px;margin-bottom:8px">No notes yet</div>
        <div style="color:var(--muted)">Create your first note on the left — it will be saved locally on this device.</div>
      </div>
    </section>
  </main>

  <footer>
    Local storage demo • Notes saved on this browser only • No external servers used.
  </footer>

  <script>
    /* --- Storage key and helpers --- */
    const STORAGE_KEY = 'stickynotes.v1';
    const qs = sel => document.querySelector(sel);
    const qsa = sel => Array.from(document.querySelectorAll(sel));

    /* --- Elements --- */
    const noteTitle = qs('#noteTitle');
    const noteBody  = qs('#noteBody');
    const palette   = qs('#palette');
    const saveNote  = qs('#saveNote');
    const saveAsNew = qs('#saveAsNew');
    const pinOnSave = qs('#pinOnSave');
    const notesGrid = qs('#notesGrid');
    const searchBox = qs('#searchBox');
    const sortBy    = qs('#sortBy');
    const clearAll  = qs('#clearAll');
    const newBlank  = qs('#newBlank');
    const exportBtn = qs('#exportBtn');
    const countInfo = qs('#countInfo');
    const emptyState = qs('#emptyState');

    let notes = []; // in-memory
    let editingId = null;
    let selectedColor = '#fff9c4';

    /* --- Utility functions --- */
    function uid(){ return 'n_' + Date.now() + '_' + Math.random().toString(36).slice(2,8) }

    function loadNotes(){
      try {
        const raw = localStorage.getItem(STORAGE_KEY);
        notes = raw ? JSON.parse(raw) : [];
      } catch(e){
        notes = [];
        console.error('Failed to load notes', e);
      }
    }

    function saveNotes(){
      localStorage.setItem(STORAGE_KEY, JSON.stringify(notes));
    }

    function formatDate(ts){
      const d = new Date(ts);
      return d.toLocaleString();
    }

    /* --- Render --- */
    function render(){
      // apply search and sort
      const q = (searchBox.value || '').trim().toLowerCase();
      let out = notes.slice();

      // pinned on top if selected
      if(sortBy.value === 'pinned'){
        out.sort((a,b) => {
          if(a.pinned === b.pinned) return b.updatedAt - a.updatedAt;
          return (a.pinned ? -1 : 1);
        });
      } else if(sortBy.value === 'new'){
        out.sort((a,b) => b.createdAt - a.createdAt);
      } else if(sortBy.value === 'old'){
        out.sort((a,b) => a.createdAt - b.createdAt);
      }

      if(q){
        out = out.filter(n => (n.title + ' ' + n.body).toLowerCase().includes(q));
      }

      notesGrid.innerHTML = '';
      if(out.length === 0){
        emptyState.style.display = 'block';
      } else {
        emptyState.style.display = 'none';
      }

      out.forEach(note => {
        const el = document.createElement('div');
        el.className = 'note';
        el.style.background = `linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)), ${note.color}`;
        el.innerHTML = `
          <div class="top">
            <div>
              <div class="title">${escapeHtml(note.title || 'Untitled')}</div>
              <div class="metaSmall">${escapeHtml(note.preview)}</div>
            </div>
            <div style="display:flex;flex-direction:column;align-items:flex-end;gap:6px">
              <button class="iconBtn pinBtn" title="${note.pinned ? 'Unpin' : 'Pin'}">${note.pinned ? '📌' : '📍'}</button>
              <div class="metaSmall">${formatDate(note.updatedAt || note.createdAt)}</div>
            </div>
          </div>

          <div class="content">${escapeHtml(note.body || '').slice(0,280)}</div>

          <div class="actions">
            <button class="btn small editBtn">Edit</button>
            <button class="btn small" title="Duplicate" data-action="dup">Duplicate</button>
            <button class="btn small" title="Delete" data-action="del" style="background:#2b2b2b">Delete</button>
          </div>
        `;

        // event handlers
        el.querySelector('.editBtn').addEventListener('click', () => openForEdit(note.id));
        el.querySelector('[data-action="del"]').addEventListener('click', () => {
          if(confirm('Delete this note?')) { notes = notes.filter(n => n.id !== note.id); saveNotes(); render(); }
        });
        el.querySelector('[data-action="dup"]').addEventListener('click', () => {
          const copy = {...note, id: uid(), createdAt: Date.now(), updatedAt: Date.now(), title: note.title + ' (copy)'};
          notes.unshift(copy); saveNotes(); render();
        });

        el.querySelector('.pinBtn').addEventListener('click', () => {
          note.pinned = !note.pinned; note.updatedAt = Date.now(); saveNotes(); render();
        });

        // clicking the card opens edit (alternative to Edit button)
        el.addEventListener('dblclick', () => openForEdit(note.id));

        notesGrid.appendChild(el);
      });

      countInfo.textContent = `${notes.length} total`;
    }

    /* --- Escaping (simple) --- */
    function escapeHtml(str){
      if(!str) return '';
      return String(str)
        .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
        .replace(/\n/g,'<br>');
    }

    /* --- Editor actions --- */
    function openForEdit(id){
      const note = notes.find(n => n.id === id);
      if(!note) return;
      editingId = id;
      noteTitle.value = note.title;
      noteBody.value  = note.body;
      selectedColor = note.color || selectedColor;
      pinOnSave.checked = !!note.pinned;
      // highlight palette
      qsa('.swatch').forEach(s => s.classList.toggle('active', s.dataset.color === selectedColor));
      window.scrollTo({top:0,behavior:'smooth'});
    }

    function resetEditor(){
      editingId = null;
      noteTitle.value = '';
      noteBody.value = '';
      pinOnSave.checked = false;
      selectedColor = qsa('.swatch')[0].dataset.color;
      qsa('.swatch').forEach(s => s.classList.toggle('active', s.dataset.color === selectedColor));
    }

    function createNoteObj({title,body,color,pinned}){
      const trimmed = (body || '').trim();
      const preview = trimmed.length > 80 ? trimmed.slice(0,80) + '…' : trimmed;
      return {
        id: uid(),
        title: (title || '').trim(),
        body: body || '',
        preview,
        color: color || selectedColor,
        pinned: !!pinned,
        createdAt: Date.now(),
        updatedAt: Date.now()
      };
    }

    /* --- Events --- */
    // palette click
    palette.addEventListener('click', (e) => {
      const sw = e.target.closest('.swatch');
      if(!sw) return;
      selectedColor = sw.dataset.color;
      qsa('.swatch').forEach(s => s.classList.toggle('active', s === sw));
    });

    // Save (if editing, update; else create)
    saveNote.addEventListener('click', () => {
      const title = noteTitle.value.trim();
      const body  = noteBody.value.trim();
      const pinned = pinOnSave.checked;

      if(editingId){
        // update
        const n = notes.find(x => x.id === editingId);
        if(!n) return alert('Note not found');
        n.title = title;
        n.body  = body;
        n.preview = (body.length>80 ? body.slice(0,80)+'…' : body);
        n.color = selectedColor;
        n.pinned = !!pinned;
        n.updatedAt = Date.now();
        saveNotes();
        render();
        resetEditor();
      } else {
        // new
        if(!title && !body) { alert('Please add a title or some content'); return; }
        const note = createNoteObj({title,body,color:selectedColor,pinned});
        // put pinned on top
        if(note.pinned) notes.unshift(note); else notes.push(note);
        saveNotes();
        render();
        resetEditor();
      }
    });

    // Save as new (always create new)
    saveAsNew.addEventListener('click', () => {
      const title = noteTitle.value.trim();
      const body  = noteBody.value.trim();
      const pinned = pinOnSave.checked;
      if(!title && !body) { alert('Please add a title or some content'); return; }
      const note = createNoteObj({title,body,color:selectedColor,pinned});
      if(note.pinned) notes.unshift(note); else notes.push(note);
      saveNotes();
      render();
      resetEditor();
    });

    // New blank (clear editor)
    newBlank.addEventListener('click', resetEditor);

    // search
    searchBox.addEventListener('input', () => render());
    sortBy.addEventListener('change', () => render());

    // clear all (confirm)
    clearAll.addEventListener('click', () => {
      if(confirm('Remove ALL notes from local storage? This cannot be undone.')) {
        notes = []; saveNotes(); render(); resetEditor();
      }
    });

    // export notes
    exportBtn.addEventListener('click', () => {
      const data = JSON.stringify(notes, null, 2);
      const blob = new Blob([data], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'stickynotes-export.json';
      a.click();
      URL.revokeObjectURL(url);
    });

    // keyboard shortcut: Ctrl+Enter to save
    document.addEventListener('keydown',(e) => {
      if((e.ctrlKey || e.metaKey) && e.key === 'Enter'){
        saveNote.click();
      }
    });

    /* --- Init --- */
    (function init(){
      // default selected color
      qsa('.swatch').forEach(s => {
        if(!s.dataset.color) return;
        if(s.dataset.color === selectedColor) s.classList.add('active');
      });

      loadNotes();
      render();
    })();

  </script>
</body>
</html>
